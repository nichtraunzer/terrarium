# --------- Global args used across stages ---------
ARG PYTHON_VERSION=3.12.11
ARG RUBY_VERSION=3.4.1
ARG BUNDLER_VERSION=2.7.1
ARG GEM_HOME=/opt/bundle
ARG BATS_CORE_VERSION=1.11.0

# ================= Stage 0 — buildlang (compile on Rocky 9) =================
FROM rockylinux:9 AS buildlang
ARG PYTHON_VERSION RUBY_VERSION BUNDLER_VERSION GEM_HOME

ENV PYENV_ROOT=/opt/pyenv \
    RBENV_ROOT=/opt/rbenv \
    GEM_HOME=${GEM_HOME}
# Put shims first so compilers/env see the right python/ruby
ENV PATH=${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${RBENV_ROOT}/shims:${RBENV_ROOT}/bin:$PATH

# Full toolchain + all -devel libs needed by CPython/Ruby & native gems
# NOTE: don't install 'curl' here to avoid conflict with curl-minimal on EL9.
RUN dnf -y update \
    && dnf -y install dnf-plugins-core \
    && dnf config-manager --set-enabled crb \
    && dnf -y groupinstall "Development Tools" \
    && dnf -y install \
    git wget tar patch which sudo procps diffutils xz unzip \
    gcc gcc-c++ make autoconf automake libtool bison \
    zlib zlib-devel bzip2 bzip2-devel xz xz-devel \
    openssl openssl-devel libffi libffi-devel \
    sqlite sqlite-devel libyaml libyaml-devel \
    readline readline-devel gdbm gdbm-devel libuuid libuuid-devel \
    tk tk-devel \
    xorriso \
    && dnf clean all

# ---- pyenv & Python ----
RUN umask 0002 \
    && git clone https://github.com/pyenv/pyenv.git ${PYENV_ROOT} \
    && git clone https://github.com/pyenv/pyenv-update.git ${PYENV_ROOT}/plugins/pyenv-update \
    && ${PYENV_ROOT}/bin/pyenv install ${PYTHON_VERSION} \
    && ${PYENV_ROOT}/bin/pyenv global  ${PYTHON_VERSION} \
    && python --version && pip --version

# ---- rbenv & Ruby + Bundler (single supported version) ----
RUN git clone https://github.com/rbenv/rbenv.git ${RBENV_ROOT} \
    && git clone https://github.com/rbenv/ruby-build.git ${RBENV_ROOT}/plugins/ruby-build \
    && ${RBENV_ROOT}/bin/rbenv install ${RUBY_VERSION} \
    && ${RBENV_ROOT}/bin/rbenv global ${RUBY_VERSION} \
    && RBENV_VERSION=${RUBY_VERSION} gem install bundler -v ${BUNDLER_VERSION}

# Install the repo Gemfile into /opt/bundle (no direct gem installs of kitchen/cinc!)
COPY Gemfile Gemfile.lock /tmp/gems/
RUN RBENV_VERSION=${RUBY_VERSION} bundle config set --global path ${GEM_HOME} \
    && RBENV_VERSION=${RUBY_VERSION} bash -lc "cd /tmp/gems \
    && BUNDLE_SILENCE_ROOT_WARNING=true bundle install --full-index --jobs=6 \
    && bundle binstubs bundler --force" \
    && rm -rf /root/.bundle/cache

# ================= Stage 1 — builder (UBI 9) =================
FROM registry.access.redhat.com/ubi9/ubi:latest AS builder
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

LABEL maintainer="Erhard Wais <erhard.wais@boehringer-ingelheim.com>, Josef Hartmann <josef.hartmann@boehringer-ingelheim.com>"

ARG TARGETPLATFORM TARGETOS TARGETARCH TARGETVARIANT BUILDPLATFORM BUILDOS BUILDARCH BUILDVARIANT
ARG PYTHON_VERSION
ARG GEM_HOME
ARG BATS_CORE_VERSION

# Tool versions (deprecated pins removed)
ENV AGE_VERSION=1.2.1 \
    AWS_CDK_VERSION=2.1024.0 \
    BUNDLER_VERSION=2.7.1 \
    CONSUL_VERSION=1.21.3 \
    GEM_HOME=/opt/bundle \
    GO_VERSION=1.24.6 \
    HELM_VERSION=3.18.4 \
    KUBECTL_VERSION=1.33.3 \
    NODEJS_VERSION=24.5.0 \
    PACKER_VERSION=1.14.1 \
    RBENV_ROOT=/opt/rbenv \
    RBENV_SHELL=bash \
    RUBY_VERSION=3.4.1 \
    SOPS_VERSION=3.10.2 \
    STARSHIP_VERSION=1.23.0 \
    TASK_VERSION=3.43.1 \
    TENV_AUTO_INSTALL=true \
    TENV_ROOT=/opt/tenv \
    TENV_VERSION=1.2.0 \
    TERRAFORM_CONFIG_INSPECT_VERSION=latest \
    TERRAFORM_DOCS_VERSION=v0.20.0 \
    TERRAFORM_VERSION=1.12.2 \
    TFLINT_VERSION=0.58.1 \
    TFSEC_VERSION=1.28.14 \
    YQ_VERSION=4.47.1 \
    ZOXIDE_VERSION=0.9.4

ENV PYENV_ROOT=/opt/pyenv

# Stable PATH for login/non-login shells
ENV PATH=${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:/opt/rbenv/shims:/opt/rbenv/bin:/opt/node/bin:$PATH
ENV PATH=$PATH:/opt/bundle/bin:/root/.local/bin:/home/terrarium/.local/bin
ENV HOME=/home/terrarium

RUN echo "I am running on ${BUILDPLATFORM}, ${BUILDOS}, ${BUILDARCH}, ${BUILDVARIANT}, \
    building for ${TARGETPLATFORM}, ${TARGETOS}, ${TARGETARCH}, ${TARGETVARIANT}."

# OS update
RUN . /etc/os-release && echo "Base image: $PRETTY_NAME" \
    && dnf -y update \
    && dnf clean all
# Harden dnf against flaky mirrors / slow connections
RUN printf '\nmax_parallel_downloads=10\nretries=10\n' >> /etc/dnf/dnf.conf

# Enable CRB for UBI + EPEL; get jq/parallel
RUN dnf -y install dnf-plugins-core \
    && dnf config-manager --set-enabled ubi-9-codeready-builder-rpms \
    && dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm \
    && dnf -y install jq parallel \
    && jq --version \
    && dnf clean all

# Runtime & build tools that DO exist in UBI repos
ENV RUNTIME_PKGS="gcc gcc-c++ make git coreutils zlib zlib-devel unzip wget \
    bzip2 bzip2-devel xz xz-devel sqlite sqlite-devel libffi libffi-devel \
    openssl openssl-devel libuuid libyaml tk gdbm tar diffutils \
    autoconf automake libtool procps which sudo"

# IMPORTANT: UBI ships coreutils-single; swap to full coreutils before installing others
RUN set -x \
    && (dnf -q list installed coreutils-single >/dev/null 2>&1 && dnf -y swap coreutils-single coreutils || dnf -y install coreutils --allowerasing) \
    && dnf -y install $RUNTIME_PKGS \
    && dnf clean all

# Robust downloader with retries for all big external fetches
RUN cat >/usr/local/bin/fetch <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
curl --fail --silent --show-error --location \
     --retry 5 --retry-all-errors --retry-delay 2 "$@"
EOF
RUN chmod +x /usr/local/bin/fetch

# ---- Bring in languages, gems, and xorriso compiled on Rocky ----
COPY --from=buildlang /opt/pyenv /opt/pyenv
COPY --from=buildlang /opt/rbenv /opt/rbenv
COPY --from=buildlang /opt/bundle /opt/bundle

# Keep the Gemfile around at a stable path for our wrappers
COPY Gemfile Gemfile.lock /opt/terrarium-gems/
RUN chmod -R a+rX /opt/terrarium-gems

# Ensure /opt/bundle matches /opt/terrarium-gems/Gemfile.lock (handles cache drift)
ENV BUNDLE_SILENCE_ROOT_WARNING=1
RUN set -eux; \
    export RBENV_VERSION="${RUBY_VERSION}" \
    BUNDLE_GEMFILE="/opt/terrarium-gems/Gemfile" \
    BUNDLE_PATH="${GEM_HOME}" \
    BUNDLE_FROZEN="true"; \
    bundle check || bundle install --jobs=6 --retry=3; \
    bundle clean --force

# xorriso + its runtime libs (EPEL/UBI does not provide xorriso)
COPY --from=buildlang /usr/bin/xorriso /usr/bin/xorriso
COPY --from=buildlang /usr/lib64/libisoburn.so.* /usr/lib64/
COPY --from=buildlang /usr/lib64/libisofs.so.*  /usr/lib64/
COPY --from=buildlang /usr/lib64/libburn.so.*   /usr/lib64/
RUN /sbin/ldconfig || /usr/sbin/ldconfig || true

# ─── uv – ultra-fast dependency manager & Python launcher ───────────────────
RUN fetch https://astral.sh/uv/install.sh | bash && uv --version

# Configure PIP SSL validation (pyenv’s pip)
RUN pip config set global.cert /etc/ssl/certs/ca-bundle.crt \
    && pip config list

# ─── Python user-level libraries via uv ─────────────────────────────────────
COPY pyproject.toml /tmp/pyproject.toml
COPY uv.lock       /tmp/uv.lock
RUN uv sync --directory /tmp --no-managed-python --frozen

# ─── Azure CLI (install globally; avoids uv lockfile writes during tests) ───
RUN rpm --import https://packages.microsoft.com/keys/microsoft.asc \
    && dnf -y install https://packages.microsoft.com/config/rhel/9/packages-microsoft-prod.rpm \
    && dnf -y install azure-cli \
    && az --version \
    && dnf clean all

# Install awscli2
RUN TARGETARCH_SYNONYM=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "aarch64") \
    && fetch -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-${TARGETOS}-${TARGETARCH_SYNONYM}.zip" \
    && unzip -qq awscliv2.zip \
    && ./aws/install \
    && rm -rf aws awscliv2.zip \
    && /usr/local/bin/aws --version

# Install AWS SAM CLI (zip for amd64, pip for arm64)
RUN if [ "x${TARGETARCH}" = "xamd64" ]; then \
    TARGETARCH_SYNONYM=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "use_pip"); \
    fetch -o awssam.zip "https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-${TARGETOS}-${TARGETARCH_SYNONYM}.zip"; \
    unzip -qq -d awssam awssam.zip && ./awssam/install && rm -rf awssam awssam.zip; \
    else \
    pip install --no-cache-dir aws-sam-cli; \
    fi \
    && sam --version

# Install Node + AWS CDK
RUN TARGETARCH_SYNONYM_SHORT=$([[ "$TARGETARCH" == "amd64" ]] && echo "x64" || echo "arm64") \
    && fetch -O "https://nodejs.org/dist/v${NODEJS_VERSION}/node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT}.tar.xz" \
    && xzcat node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT}.tar.xz | tar xpf - -C /opt/ \
    && mv /opt/node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT} /opt/node \
    && rm -f node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT}.tar.xz \
    && /opt/node/bin/npm install -g aws-cdk@${AWS_CDK_VERSION} \
    && chown -R 1001:0 /opt/node && chmod +x /opt/node/bin/* \
    && node --version && cdk --version

# Install tenv + Terraform (single supported version)
RUN TENV_ARCH=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && dnf -y install "https://github.com/tofuutils/tenv/releases/download/v${TENV_VERSION}/tenv_v${TENV_VERSION}_${TENV_ARCH}.rpm" \
    && tenv tf install ${TERRAFORM_VERSION} \
    && tenv tf use ${TERRAFORM_VERSION} \
    && terraform -version \
    && chown -R 1001:0 "${TENV_ROOT}" && chmod -R 2775 "${TENV_ROOT}"

# Safe tenv profile: prefer update-path if available, otherwise init
RUN cat > /etc/profile.d/tenv.sh <<'EOF'
# Safe tenv PATH integration. Never clobber PATH.
if command -v tenv >/dev/null 2>&1; then
  if tenv --help 2>&1 | grep -q 'update-path'; then
    TENV_NEW_PATH="$((/usr/bin/tenv update-path) 2>/dev/null || true)"
    if [ -n "$TENV_NEW_PATH" ]; then
      case ":$PATH:" in *":$TENV_NEW_PATH:"*) : ;; *) PATH="$TENV_NEW_PATH:$PATH" ;; esac
    fi
  elif tenv --help 2>&1 | grep -q 'init'; then
    eval "$(/usr/bin/tenv init - bash 2>/dev/null)" || true
  fi
fi
export PATH
EOF

# Packer
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && fetch -o /tmp/packer.zip "https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.zip" \
    && unzip -qq /tmp/packer.zip -d /usr/local/bin packer \
    && rm -f /tmp/packer.zip \
    && packer --version

# Consul
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && fetch -o /tmp/consul.zip "https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.zip" \
    && unzip -qq /tmp/consul.zip -d /usr/local/bin consul \
    && rm -f /tmp/consul.zip \
    && chmod +x /usr/local/bin/consul \
    && /usr/local/bin/consul -version

# terraform-config-inspect (support "latest" tag)
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64"); \
    if [ "${TERRAFORM_CONFIG_INSPECT_VERSION}" = "latest" ]; then \
    TCI_TAG="$(curl -fsSL https://api.github.com/repos/nichtraunzer/terraform-config-inspect/releases/latest | jq -r .tag_name)"; \
    TCI_VER="${TCI_TAG#v}"; \
    else \
    TCI_TAG="v${TERRAFORM_CONFIG_INSPECT_VERSION}"; \
    TCI_VER="${TERRAFORM_CONFIG_INSPECT_VERSION#v}"; \
    fi; \
    curl -fsSLo /tmp/terraform-config-inspect.tar.gz \
    "https://github.com/nichtraunzer/terraform-config-inspect/releases/download/${TCI_TAG}/terraform-config-inspect_${TCI_VER}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.tar.gz" \
    && tar zxpf /tmp/terraform-config-inspect.tar.gz -C /usr/local/bin/ terraform-config-inspect \
    && rm -f /tmp/terraform-config-inspect.tar.gz \
    && chmod 755 /usr/local/bin/terraform-config-inspect \
    && /usr/local/bin/terraform-config-inspect

# Terraform Docs
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && fetch -o /tmp/terraform-docs.tar.gz "https://github.com/terraform-docs/terraform-docs/releases/download/${TERRAFORM_DOCS_VERSION}/terraform-docs-${TERRAFORM_DOCS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT2}.tar.gz" \
    && tar zxpf /tmp/terraform-docs.tar.gz -C /usr/local/bin/ terraform-docs \
    && rm -f /tmp/terraform-docs.tar.gz \
    && chmod +x /usr/local/bin/terraform-docs \
    && /usr/local/bin/terraform-docs --help

# tflint
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && fetch -o /tmp/tflint.zip "https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_${TARGETARCH_SYNONYM_SHORT2}.zip" \
    && unzip -qq /tmp/tflint.zip -d /usr/local/bin \
    && rm -f /tmp/tflint.zip \
    && tflint --version

# tfsec
RUN ARCH=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && fetch -o /usr/local/bin/tfsec \
    "https://github.com/aquasecurity/tfsec/releases/download/v${TFSEC_VERSION}/tfsec-linux-${ARCH}" \
    && chmod +x /usr/local/bin/tfsec \
    && tfsec --version

# sops + age
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && TARGETARCH_SYNONYM_SHORT3=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "aarch64") \
    && dnf -y install "https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-${SOPS_VERSION}-1.${TARGETARCH_SYNONYM_SHORT3}.rpm" \
    && fetch -o /tmp/age.tar.gz "https://github.com/FiloSottile/age/releases/download/v${AGE_VERSION}/age-v${AGE_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT2}.tar.gz" \
    && tar zxpf /tmp/age.tar.gz --strip-components=1 -C /usr/local/bin age/age age/age-keygen \
    && rm -f /tmp/age.tar.gz \
    && /usr/bin/sops --version \
    && /usr/local/bin/age --version \
    && dnf clean all

# starship & zoxide
RUN fetch -o /tmp/starship.sh https://starship.rs/install.sh \
    && chmod +x /tmp/starship.sh \
    && /tmp/starship.sh --yes \
    && rm -f /tmp/starship.sh \
    && fetch -o /tmp/zoxide.sh https://webinstall.dev/zoxide \
    && chmod +x /tmp/zoxide.sh \
    && /tmp/zoxide.sh && rm -f /tmp/zoxide.sh

# Go (toolchain tarball) + go-task
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && fetch -o /tmp/go.tar.gz "https://golang.org/dl/go${GO_VERSION}.${TARGETOS}-${TARGETARCH_SYNONYM_SHORT2}.tar.gz" \
    && tar -C /usr/local -xzf /tmp/go.tar.gz && rm -f /tmp/go.tar.gz
ENV PATH=$PATH:/usr/local/go/bin
RUN fetch https://taskfile.dev/install.sh | sh -s -- -d v${TASK_VERSION} \
    && task --version

# yq
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && fetch -o /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_${TARGETARCH_SYNONYM_SHORT2}" \
    && chmod +x /usr/local/bin/yq \
    && /usr/local/bin/yq --version

# kubectl
RUN curl -fsSLo /usr/local/bin/kubectl \
    https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${TARGETARCH}/kubectl \
    && chmod +x /usr/local/bin/kubectl \
    && kubectl version --client=true

# helm
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && curl -fsSLo /tmp/helm.tar.gz "https://get.helm.sh/helm-v${HELM_VERSION}-linux-${TARGETARCH_SYNONYM_SHORT2}.tar.gz" \
    && tar -zxvf /tmp/helm.tar.gz --strip-components=1 -C /usr/local/bin linux-${TARGETARCH_SYNONYM_SHORT2}/helm \
    && rm -f /tmp/helm.tar.gz \
    && helm version

# Ownerships & dirs
RUN chown -R 1001:0 ${HOME} && chmod -R g+rw ${HOME} \
    && mkdir -p ${GEM_HOME} && chmod 2770 ${GEM_HOME} \
    && chown -R 1001:0 ${GEM_HOME} && chmod -R g+rw ${GEM_HOME} \
    && ls -lisa ${HOME} ${GEM_HOME}

# ---- Kitchen & Cinc wrappers (MANDATORY) -----------------------------------
RUN install -d -m 0755 /usr/local/bin

# kitchen wrapper
RUN cat >/usr/local/bin/kitchen <<'EOF'
#!/usr/bin/env bash
export BUNDLE_GEMFILE=/opt/terrarium-gems/Gemfile
export BUNDLE_PATH=/opt/bundle
exec /opt/rbenv/shims/bundle exec kitchen "$@"
EOF
RUN chmod +x /usr/local/bin/kitchen

# cinc-auditor wrapper
RUN cat >/usr/local/bin/cinc-auditor <<'EOF'
#!/usr/bin/env bash
export BUNDLE_GEMFILE=/opt/terrarium-gems/Gemfile
export BUNDLE_PATH=/opt/bundle
exec /opt/rbenv/shims/bundle exec cinc-auditor "$@"
EOF
RUN chmod +x /usr/local/bin/cinc-auditor

# Smoke check that both wrappers work at build time
RUN RBENV_VERSION=${RUBY_VERSION} \
    BUNDLE_GEMFILE=/opt/terrarium-gems/Gemfile \
    BUNDLE_PATH=${GEM_HOME} \
    bundle check
RUN kitchen --version && cinc-auditor version

# bats-core for tests (single install)
RUN set -eux; \
    rm -rf /opt/bats-core; \
    git clone --depth 1 --branch "v${BATS_CORE_VERSION}" \
    https://github.com/bats-core/bats-core.git /opt/bats-core; \
    /opt/bats-core/install.sh /usr/local; \
    rm -rf /opt/bats-core; \
    bats --version

COPY tests /home/terrarium/tests

WORKDIR $HOME
CMD ["/bin/bash", "-i", "-l"]

# ================= Stage 2 — test =================
FROM builder AS test
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN install -d -m 0755 /home/terrarium/tests/test_helper \
    && rm -rf /home/terrarium/tests/test_helper/bats-support /home/terrarium/tests/test_helper/bats-assert \
    && git clone --depth 1 https://github.com/bats-core/bats-support.git /home/terrarium/tests/test_helper/bats-support \
    && git clone --depth 1 https://github.com/bats-core/bats-assert.git   /home/terrarium/tests/test_helper/bats-assert
RUN find /home/terrarium/tests -type f -name "*.bats" -exec chmod +x {} \;
RUN useradd -u 1001 terrarium
USER 1001:0
RUN bats --report-formatter junit /home/terrarium/tests --output /home/terrarium --jobs $(nproc)

# ================= Stage 3 — final =================
FROM builder AS final
CMD ["/bin/bash"]
