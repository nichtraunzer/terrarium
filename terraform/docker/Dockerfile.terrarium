FROM rockylinux:8

LABEL maintainer="Erhard Wais <erhard.wais@boehringer-ingelheim.com>, Josef Hartmann <josef.hartmann@boehringer-ingelheim.com>"

ARG TARGETPLATFORM TARGETOS TARGETARCH TARGETVARIANT BUILDPLATFORM BUILDOS BUILDARCH BUILDVARIANT

#ENV TARGETARCH_SYNONYM=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "aarch64")
#ENV TARGETARCH_SYNONYM_SHORT=$([[ "$TARGETARCH" == "amd64" ]] && echo "x64" || echo "arm64")

ENV TERRAFORM_VERSION=1.4.6 \
    TERRAFORM_VERSION_DEPRECATED=1.2.9 \
    TERRAFORM_CONFIG_INSPECT_VERSION=0.2.0 \
    TERRAFORM_DOCS_VERSION=v0.16.0 \
    RUBY_VERSION=3.2.2 \
    RUBY_VERSION_DEPRECATED=2.7.5 \
    PACKER_VERSION=1.8.7 \
    CONSUL_VERSION=1.15.2 \
    TFENV_VERSION=3.0.0 \
    TFLINT_VERSION=0.46.1 \
    NODEJS_VERSION=18.16.0 \
    BUNDLER_VERSION=2.4.13 \
    BUNDLER_VERSION_DEPRECATED=2.2.23 \
    GEM_HOME=/opt/bundle \
    RBENV_ROOT=/opt/rbenv \
    RBENV_SHELL=bash \
    SOPS_VERSION=3.7.3 \
    AGE_VERSION=1.1.1 \
    KUBECTL_VERSION=1.25.10 \
    HELM_VERSION=3.11.3 \
    STARSHIP_VERSION=1.14.2 \
    ZOXIDE_VERSION=0.9.0

ENV INSTALL_PKGS="yum-utils gcc make git-core zlib zlib-devel gcc-c++ patch readline readline-devel python36 platform-python-devel unzip wget \
    python38 python38-devel python38-pip python38-setuptools \
    python39 python39-devel python39-pip python39-setuptools \
    python3.11 python3.11-devel python3.11-pip python3.11-setuptools \
    libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl diffutils libyaml-devel sqlite-devel xz procps which sudo"
ENV PATH=/opt/tfenv/bin:/opt/rbenv/shims:/opt/rbenv/bin:/opt/node/bin:$PATH
ENV HOME=/home/terrarium

COPY python_requirements /tmp/requirements.txt

RUN echo "I am running on ${BUILDPLATFORM}, ${BUILDOS}, ${BUILDARCH}, ${BUILDVARIANT}, \
    building for ${TARGETPLATFORM}, ${TARGETOS}, ${TARGETARCH}, ${TARGETVARIANT}."

# Install jq
RUN yum -y install epel-release \
    && crb enable \
    && yum install -y jq parallel \
    && jq -Version \
    && yum clean all

RUN set -x \
    && dnf -y install $INSTALL_PKGS

RUN curl "https://bootstrap.pypa.io/pip/3.6/get-pip.py" -o "get-pip.py" \
    && python3 get-pip.py

# Upgrade PIP
RUN pip3 install --upgrade pip \
    && pip3 -V \
    && pip3.8 install --upgrade pip \
    && pip3.8 -V \
    && pip3.9 install --upgrade pip \
    && pip3.9 -V \
    && pip3.11 install --upgrade pip \
    && pip3.11 -V \
    && pip3 install virtualenv pycodestyle \
    && pip3.8 install virtualenv pycodestyle \
    && pip3.9 install virtualenv pycodestyle \
    && pip3.11 install virtualenv pycodestyle \
    && alternatives --set python /usr/bin/python3.11 \
    && alternatives --set python3 /usr/bin/python3.11

# Configure PIP SSL validation
RUN pip config set global.cert /etc/ssl/certs/ca-bundle.crt \
    && pip config list

# Install awscli2
RUN TARGETARCH_SYNONYM=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "aarch64") \
    && curl "https://awscli.amazonaws.com/awscli-exe-${TARGETOS}-${TARGETARCH_SYNONYM}.zip" -o "awscliv2.zip" \
    && unzip -qq awscliv2.zip \
    && ./aws/install \
    && rm -f awscliv2.zip \
    && rm -Rf ./aws \
    && /usr/local/bin/aws --version

# Install awssamcli
RUN if [ x${TARGETARCH} == "xamd64" ]; then \
      TARGETARCH_SYNONYM=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "use_pip") \
      && curl -L "https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-${TARGETOS}-${TARGETARCH_SYNONYM}.zip" -o "awssam.zip" \
      && unzip -qq -d awssam awssam.zip \
      && ./awssam/install \
      && rm -f awssam.zip \
      && rm -Rf ./awssam; \
    else \
      pip3 install aws-sam-cli; \
    fi \
    && sam --version

# Install python requirements
RUN echo python3 -m pip install -r /tmp/requirements.txt \
    && echo python3.8 -m pip install -r /tmp/requirements.txt \
    && echo python3.9 -m pip install -r /tmp/requirements.txt \
    && python3.11 -m pip install -r /tmp/requirements.txt

# Install aws cdk
RUN TARGETARCH_SYNONYM_SHORT=$([[ "$TARGETARCH" == "amd64" ]] && echo "x64" || echo "arm64") \
    && wget -q "https://nodejs.org/dist/v${NODEJS_VERSION}/node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT}.tar.xz" \
    && xzcat node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT}.tar.xz | tar xpf - -C /opt/ \
    && rm -f node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT}.tar.xz \
    && mv /opt/node-v${NODEJS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT} /opt/node \
    && /opt/node/bin/npm install -g aws-cdk \
    && chown -R 1001:0 /opt/node && chmod +x /opt/node/bin/* \
    && node --version \
    && cdk --version

# Install Terraform
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && wget -q -O /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.zip" \
    && unzip /tmp/terraform.zip -d /usr/local/bin \
    && rm -rf /tmp/terraform.zip \
    && terraform -help

# Install tfenv
RUN TFENV_ARCH=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && umask 0002 && cd /opt && git clone --branch v${TFENV_VERSION} https://github.com/tfutils/tfenv.git \
    && TFENV_CURL_OUTPUT=0 /opt/tfenv/bin/tfenv install ${TERRAFORM_VERSION} \
    && TFENV_CURL_OUTPUT=0 /opt/tfenv/bin/tfenv install ${TERRAFORM_VERSION_DEPRECATED} \
    && /opt/tfenv/bin/tfenv use ${TERRAFORM_VERSION} \
    && chown -R 1001:0 /opt/tfenv && chmod +x /opt/tfenv/bin/* \
    && echo "export TFENV_ARCH=${TFENV_ARCH}" >> ~/.bash_profile \
    && terraform -version \
    && tfenv list

# Install tflint
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && wget -q -O /tmp/tflint.zip "https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_${TARGETARCH_SYNONYM_SHORT2}.zip" \
    && unzip /tmp/tflint.zip -d /usr/local/bin \
    && rm -rf /tmp/tflint.zip \
    && tflint --version

# Install Packer
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && wget -q -O /tmp/packer.zip "https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.zip" \
    && unzip /tmp/packer.zip -d /usr/local/bin \
    && rm -rf /tmp/packer.zip \
    && packer --version

## Install consul-cli
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && wget -q "https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.zip" \
    && unzip consul_${CONSUL_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.zip -d /usr/local/bin \
    && rm -f consul_${CONSUL_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.zip \
    && chmod +x /usr/local/bin/consul \
    && /usr/local/bin/consul -version

# Install terraform-config-inspect
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && wget -q -O /tmp/terraform-config-inspect.tar.gz https://github.com/nichtraunzer/terraform-config-inspect/releases/download/v${TERRAFORM_CONFIG_INSPECT_VERSION}/terraform-config-inspect_${TERRAFORM_CONFIG_INSPECT_VERSION}_${TARGETOS}_${TARGETARCH_SYNONYM_SHORT2}.tar.gz \
    && tar zxpf /tmp/terraform-config-inspect.tar.gz -C /usr/local/bin/ \
    && rm -f /tmp/terraform-config-inspect.tar.gz \
    && chmod 755 /usr/local/bin/terraform-config-inspect \
    && /usr/local/bin/terraform-config-inspect

# Install Terraform Docs
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && wget -q -O /tmp/terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/${TERRAFORM_DOCS_VERSION}/terraform-docs-${TERRAFORM_DOCS_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT2}.tar.gz \
    && tar zxpf /tmp/terraform-docs.tar.gz -C /usr/local/bin/ terraform-docs \
    && chmod +x /usr/local/bin/terraform-docs \
    && /usr/local/bin/terraform-docs --help

# Install mozilla/sops and AGE
RUN TARGETARCH_SYNONYM_SHORT2=$([[ "$TARGETARCH" == "amd64" ]] && echo "amd64" || echo "arm64") \
    && TARGETARCH_SYNONYM_SHORT3=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "aarch64") \
    && yum install -y https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-${SOPS_VERSION}-1.${TARGETARCH_SYNONYM_SHORT3}.rpm \
    && wget -q -O /tmp/age.tar.gz https://github.com/FiloSottile/age/releases/download/v${AGE_VERSION}/age-v${AGE_VERSION}-${TARGETOS}-${TARGETARCH_SYNONYM_SHORT2}.tar.gz \
    && tar zxpf /tmp/age.tar.gz --strip-components=1 -C /usr/local/bin age/age age/age-keygen \
    && rm -f /tmp/age.tar.gz \
    && /usr/local/bin/sops --version \
    && /usr/local/bin/age --version

# Install starship and zoxide
RUN TARGETARCH_SYNONYM=$([[ "$TARGETARCH" == "amd64" ]] && echo "x86_64" || echo "aarch64") \
    && wget -q -O /tmp/starship.sh https://starship.rs/install.sh \
    && chmod +x /tmp/starship.sh \
    && /tmp/starship.sh --yes \
    && rm -f /tmp/starship.sh \
    && wget -q -O /tmp/zoxide.sh https://webinstall.dev/zoxide \
    && chmod +x /tmp/zoxide.sh \
    && /tmp/zoxide.sh \
    && rm -f /tmp/zoxide.sh

RUN chown -R 1001:0 ${HOME} \
    && chmod -R g+rw ${HOME} \
    && mkdir -p ${GEM_HOME} \
    && chmod 2770 ${GEM_HOME}

RUN chown -R 1001:0 ${GEM_HOME} \
    && chmod -R g+rw ${GEM_HOME} \
    && ls -lisa ${HOME} ${GEM_HOME}

# RUN ls $JAVA_HOME/lib/security/cacerts \
#    && chown 1001:0 $JAVA_HOME/lib/security/cacerts \
#     && chmod g+w $JAVA_HOME/lib/security/cacerts

# setup ruby env and bundler gems
# RUBY https://syslint.com/blog/tutorial/how-to-install-ruby-on-rails-with-rbenv-on-centos-7-or-rhel-7/
RUN cd /opt \
    && umask 0002 \
    && git clone https://github.com/rbenv/rbenv.git /opt/rbenv \
    && echo 'export PATH="/opt/rbenv/shims:/opt/rbenv/bin:$PATH"' >> ~/.bash_profile \
    && echo 'eval "$(rbenv init -)"' >> ~/.bash_profile \
    && source ~/.bash_profile \
    && git clone https://github.com/rbenv/ruby-build.git /opt/rbenv/plugins/ruby-build \
    && echo 'export PATH="/opt/rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bash_profile \
    && source ~/.bash_profile \
    && rbenv install ${RUBY_VERSION} \
    && rbenv global ${RUBY_VERSION} \
    && gem install bundler -v ${BUNDLER_VERSION} \
    && RBENV_VERSION=${RUBY_VERSION} gem install bundler -v ${BUNDLER_VERSION} \
    && bundle config default ${BUNDLER_VERSION} \
    && RBENV_VERSION=${RUBY_VERSION} bundle config default ${BUNDLER_VERSION} \
    && bundle config set --global path ${GEM_HOME} \
    && RBENV_VERSION=${RUBY_VERSION} bundle config set --global path ${GEM_HOME}

RUN source ~/.bash_profile \
    && rbenv install ${RUBY_VERSION_DEPRECATED} \
    && RBENV_VERSION=${RUBY_VERSION_DEPRECATED} gem install bundler -v ${BUNDLER_VERSION_DEPRECATED} \
    && rbenv install -L

COPY Gemfile Gemfile.lock ${GEM_HOME}/

RUN source ~/.bash_profile \
    && RBENV_VERSION=${RUBY_VERSION} ruby --version \
    && RBENV_VERSION=${RUBY_VERSION_DEPRECATED} ruby --version \
    && cd ${GEM_HOME} \
    && BUNDLE_SILENCE_ROOT_WARNING=true bundle install --full-index --jobs=6 \
    && rm -Rf ${HOME}/.bundle/cache

WORKDIR $HOME
CMD /bin/bash -i "${HOME}/.bash_profile"
